/**
 *
 * \file    Duree.cpp
 *
 * \authors M. Laporte
 *
 * \date    02/04/2018
 *
 * \version V2.0
 *
 * \brief  définitions de la classe Duree
 *
 **/
#include <iostream>
#include <iomanip>   // setw()
#include "duree.h"

using namespace nsUtil;
using namespace std;

#define DUREE nsUtil::Duree

DUREE::Duree  (const ULLong_t duree /* = ULLong_t (0) */)
    : myDuree (duree)
{
    normaliser ();
    cout << "duree construite : ";
    display ();
    cout << endl;

} // Duree()

DUREE::Duree  (const Duree & duree)
    : myDuree (duree.getDuree ())
{
    normaliser ();
    cout << "duree construite par recopie : ";
    display ();
    cout << endl;

} // Duree()

DUREE::~Duree  (void)
{
    cout << "duree détruite : ";
    display ();
    cout << endl;

} // Duree()

void DUREE::normaliser (void)
{
    myDays    =  myDuree / 86400;
    myHours   = (myDuree % 86400) / 3600;
    myMinutes  = (myDuree % 3600) / 60;
    mySeconds =  myDuree % 60;

} // normaliser()

ULLong_t DUREE::getDuree (void) const { return myDuree; }

void DUREE::display (void) const
{
    cout << '['
         << setw (10) << myDays    << ':'
         << setfill ('0')
         << setw (2)  << myHours   << " heure(s)"
         << setw (2)  << myMinutes << " minute(s)"
         << setw (2)  << mySeconds << " seconde(s)"
         << setfill (' ')
         << ']';

} // display()

Duree & DUREE::operator ++ (void) noexcept
{
    myDuree++;
    normaliser();

    return (*this);
}
Duree   DUREE::operator ++ (int incr)  noexcept
{
    Duree duree = (*this);
    myDuree += incr;
    normaliser();
    return duree;
}

Duree & DUREE::operator -- (void) noexcept
{
    myDuree--;
    normaliser();

    return (*this);
}

Duree   DUREE::operator -- (int decr)  noexcept
{
    Duree duree = (*this);
    myDuree -= decr;
    normaliser();
    return duree;
}

DUREE DUREE::operator + (const Duree & d) const
{
    return myDuree + d.myDuree;

} // operator +()

DUREE DUREE::operator - (const Duree & d) const
{
    return myDuree - (myDuree < d.myDuree ? myDuree : d.myDuree);

} // operator -()

DUREE & DUREE::operator += (const Duree & duree) noexcept
{
    myDuree += duree.getDuree();
    normaliser();
    
    return (*this);
}

DUREE & DUREE::operator += (const unsigned long long & duree) noexcept
{
    myDuree += duree;
    normaliser();
    
    return (*this);
}

DUREE & DUREE::operator -= (const Duree & duree) noexcept
{
    myDuree -= duree.getDuree();
    normaliser();
    
    return (*this);
}

DUREE & DUREE::operator -= (const unsigned long long & duree) noexcept
{
    myDuree -= duree;
    normaliser();
    
    return (*this);
}

bool DUREE::operator > (const Duree & d) const
{
    return myDuree > d.myDuree;

} // operator >()

bool DUREE::operator < (const Duree & d) const
{
    return myDuree < d.myDuree;

} // operator <()

bool DUREE::operator != (const Duree & d) const
{
    return myDuree != d.myDuree;

} // operator !=()

bool DUREE::operator == (const Duree & d) const
{
    return myDuree == d.myDuree;

} // operator ==()

#undef DUREE
